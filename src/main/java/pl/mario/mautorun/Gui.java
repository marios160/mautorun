package pl.mario.mautorun;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.table.TableModel;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import static pl.mario.mautorun.Main.conf;
import static pl.mario.mautorun.Main.gui;

/**
 *
 * @author Mario PL
 */
public class Gui extends javax.swing.JFrame {

    /**
     * Creates new form Glowne
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        name_ = new javax.swing.JLabel();
        name_server = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        time_button = new javax.swing.JButton();
        map_button = new javax.swing.JComboBox();
        players = new javax.swing.JLabel();
        current_players = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxplayers = new javax.swing.JComboBox();
        uptime = new javax.swing.JLabel();
        uptimeVal = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        passwdVal = new javax.swing.JLabel();
        startSrvTogg = new javax.swing.JToggleButton();
        kickAllButt = new javax.swing.JButton();
        visit = new javax.swing.JLabel();
        visitVal = new javax.swing.JLabel();
        crash = new javax.swing.JLabel();
        crashVal = new javax.swing.JLabel();
        crashbar = new javax.swing.JProgressBar();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        igiTab = new javax.swing.JTable(igitabmod);
        jScrollPane4 = new javax.swing.JScrollPane();
        consTab = new javax.swing.JTable(constabmod);
        jScrollPane2 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        logServer = new javax.swing.JTextPane();
        clearChat = new javax.swing.JButton();
        announceField = new javax.swing.JTextField();
        announceButt = new javax.swing.JButton();
        clearLog = new javax.swing.JButton();
        commandField = new javax.swing.JTextField();
        commandButt = new javax.swing.JButton();
        banField = new javax.swing.JTextField();
        banButton = new javax.swing.JButton();
        unbanButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Censors = new javax.swing.JCheckBox();
        adminPanel = new javax.swing.JCheckBox();
        controlItems = new javax.swing.JCheckBox();
        dispAddAdmin = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        strefaCzasowa = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        WelcomeCheck = new javax.swing.JCheckBox();
        MaxBanMask = new javax.swing.JLabel();
        defMask = new javax.swing.JComboBox();
        maxMask = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nameexe = new javax.swing.JTextField();
        warnings = new javax.swing.JSpinner();
        saveSettings = new javax.swing.JButton();
        welcomePlayers = new javax.swing.JTextField();
        welcomeCombo = new javax.swing.JComboBox();
        welcome2 = new javax.swing.JTextField();
        resetVisit = new javax.swing.JButton();
        resetCrash = new javax.swing.JButton();
        changes = new javax.swing.JButton();
        sktk = new javax.swing.JCheckBox();
        nicks = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        juniorRcon = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        killLog = new javax.swing.JButton();
        longLog = new javax.swing.JButton();
        longChat = new javax.swing.JButton();
        denidedNicksList = new javax.swing.JButton();
        optimization = new javax.swing.JButton();
        whois = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        softTime = new javax.swing.JLabel();
        mRunTime = new javax.swing.JLabel();
        remainItem = new javax.swing.JLabel();
        remainingItems = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Mautorun by Mario PL");
        setMaximumSize(new java.awt.Dimension(850, 630));
        setMinimumSize(new java.awt.Dimension(850, 630));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setPreferredSize(new java.awt.Dimension(850, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setToolTipText("");
        mainPanel.setMaximumSize(new java.awt.Dimension(850, 60));
        mainPanel.setMinimumSize(new java.awt.Dimension(850, 60));
        mainPanel.setPreferredSize(new java.awt.Dimension(800, 60));

        name_.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        name_.setText("Name:");

        name_server.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        name_server.setText("IGI2 Server [igi2.xaa.pl]");

        time.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        time.setText("Time:");

        time_button.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        time_button.setText("00:00");
        time_button.setMargin(new java.awt.Insets(0, 2, 0, 2));
        time_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_buttonActionPerformed(evt);
            }
        });

        map_button.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        map_button.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Redstone", "Forestride", "Sandstorm", "Timberland", "Chinesetemple" }));
        map_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                map_buttonActionPerformed(evt);
            }
        });

        players.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        players.setText("Players:");

        current_players.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        current_players.setText("0");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("/");

        maxplayers.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        maxplayers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", " " }));
        maxplayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxplayersActionPerformed(evt);
            }
        });

        uptime.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        uptime.setText("Uptime:");

        uptimeVal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        uptimeVal.setText("0h");

        password.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        password.setText("Pass:");

        passwdVal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        passwdVal.setForeground(new java.awt.Color(0, 204, 51));
        passwdVal.setText("No");

        startSrvTogg.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        startSrvTogg.setText("Enable Server");
        startSrvTogg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSrvToggActionPerformed(evt);
            }
        });

        kickAllButt.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        kickAllButt.setText("Kick All");
        kickAllButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kickAllButtActionPerformed(evt);
            }
        });

        visit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        visit.setText("Visit:");

        visitVal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        visitVal.setText("0");

        crash.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        crash.setText("Crash:");

        crashVal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        crashVal.setText("0");

        crashbar.setForeground(new java.awt.Color(255, 0, 0));
        crashbar.setMaximum(1500);
        crashbar.setToolTipText("");
        crashbar.setString("");
        crashbar.setStringPainted(true);
        crashbar.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(name_)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name_server, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(startSrvTogg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kickAllButt)
                        .addGap(18, 18, 18)
                        .addComponent(visit)
                        .addGap(9, 9, 9)
                        .addComponent(visitVal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(uptime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uptimeVal, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(password)
                        .addGap(5, 5, 5)
                        .addComponent(passwdVal)
                        .addGap(18, 18, 18)
                        .addComponent(crash)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crashVal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crashbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(time)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(time_button, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(map_button, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(players)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(current_players, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxplayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(name_server)
                        .addComponent(name_)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(time_button, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(map_button, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(current_players, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(players, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxplayers, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(visit, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(visitVal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(uptime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(uptimeVal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(passwdVal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(crashVal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(crash, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(startSrvTogg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(kickAllButt, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crashbar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane2.setFocusable(false);
        jTabbedPane2.setMaximumSize(new java.awt.Dimension(830, 500));
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(830, 500));
        jTabbedPane2.setName(""); // NOI18N
        jTabbedPane2.setPreferredSize(new java.awt.Dimension(830, 500));

        jPanel3.setAutoscrolls(true);
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.setFocusable(false);
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 500));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 500));
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 500));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(400, 150));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 100));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 150));

        igiTab.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        igiTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nick", "Score", "IP", "Ping"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        igiTab.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        igiTab.setColumnSelectionAllowed(true);
        igiTab.setFocusable(false);
        igiTab.setMaximumSize(new java.awt.Dimension(400, 150));
        igiTab.setMinimumSize(new java.awt.Dimension(400, 100));
        igiTab.setPreferredSize(new java.awt.Dimension(400, 150));
        igiTab.setRowHeight(15);
        jScrollPane1.setViewportView(igiTab);
        igiTab.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (igiTab.getColumnModel().getColumnCount() > 0) {
            igiTab.getColumnModel().getColumn(0).setPreferredWidth(20);
            igiTab.getColumnModel().getColumn(1).setPreferredWidth(160);
            igiTab.getColumnModel().getColumn(2).setPreferredWidth(60);
            igiTab.getColumnModel().getColumn(3).setResizable(false);
            igiTab.getColumnModel().getColumn(3).setPreferredWidth(100);
            igiTab.getColumnModel().getColumn(4).setResizable(false);
            igiTab.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        jScrollPane4.setAutoscrolls(true);
        jScrollPane4.setMaximumSize(new java.awt.Dimension(400, 150));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(400, 100));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(400, 150));

        consTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nick", "Score", "IP", "Ping"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        consTab.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        consTab.setCellSelectionEnabled(true);
        consTab.setFocusable(false);
        consTab.setMaximumSize(new java.awt.Dimension(400, 150));
        consTab.setMinimumSize(new java.awt.Dimension(400, 100));
        consTab.setPreferredSize(new java.awt.Dimension(400, 150));
        consTab.setRowHeight(15);
        jScrollPane4.setViewportView(consTab);
        if (consTab.getColumnModel().getColumnCount() > 0) {
            consTab.getColumnModel().getColumn(0).setPreferredWidth(20);
            consTab.getColumnModel().getColumn(1).setPreferredWidth(160);
            consTab.getColumnModel().getColumn(2).setPreferredWidth(60);
            consTab.getColumnModel().getColumn(3).setPreferredWidth(100);
            consTab.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane2MouseWheelMoved(evt);
            }
        });

        chat.setEditable(false);
        chat.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        chat.setMaximumSize(new java.awt.Dimension(400, 270));
        chat.setMinimumSize(new java.awt.Dimension(400, 100));
        chat.setName(""); // NOI18N
        chat.setPreferredSize(new java.awt.Dimension(400, 270));
        jScrollPane2.setViewportView(chat);

        jScrollPane6.setAutoscrolls(true);
        jScrollPane6.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane6MouseWheelMoved(evt);
            }
        });

        logServer.setEditable(false);
        logServer.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        logServer.setMaximumSize(new java.awt.Dimension(400, 270));
        logServer.setMinimumSize(new java.awt.Dimension(400, 100));
        logServer.setPreferredSize(new java.awt.Dimension(400, 270));
        jScrollPane6.setViewportView(logServer);

        clearChat.setText("Clear");
        clearChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChatActionPerformed(evt);
            }
        });

        announceField.setToolTipText("Announce message");
        announceField.setMaximumSize(new java.awt.Dimension(200, 20));
        announceField.setMinimumSize(new java.awt.Dimension(100, 20));
        announceField.setName(""); // NOI18N
        announceField.setPreferredSize(new java.awt.Dimension(200, 20));
        announceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                announceFieldActionPerformed(evt);
            }
        });
        announceField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                announceFieldKeyPressed(evt);
            }
        });

        announceButt.setText("Send announce");
        announceButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                announceButtActionPerformed(evt);
            }
        });

        clearLog.setText("Clear");
        clearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogActionPerformed(evt);
            }
        });

        commandField.setMaximumSize(new java.awt.Dimension(200, 20));
        commandField.setMinimumSize(new java.awt.Dimension(100, 20));
        commandField.setPreferredSize(new java.awt.Dimension(200, 20));
        commandField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandFieldActionPerformed(evt);
            }
        });
        commandField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                commandFieldKeyPressed(evt);
            }
        });

        commandButt.setText("Send command");
        commandButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandButtActionPerformed(evt);
            }
        });

        banField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                banFieldKeyPressed(evt);
            }
        });

        banButton.setText("Ban");
        banButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                banButtonActionPerformed(evt);
            }
        });
        banButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                banButtonKeyPressed(evt);
            }
        });

        unbanButton.setText("Unban");
        unbanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unbanButtonActionPerformed(evt);
            }
        });
        unbanButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                unbanButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(banField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(banButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unbanButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(clearChat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(announceField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(28, 28, 28)
                                .addComponent(announceButt)
                                .addGap(8, 8, 8)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(clearLog)
                                .addGap(14, 14, 14)
                                .addComponent(commandField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(22, 22, 22)
                                .addComponent(commandButt))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(49, 49, 49))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandButt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearChat)
                        .addComponent(announceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(announceButt)
                        .addComponent(clearLog)
                        .addComponent(commandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(banField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(banButton)
                    .addComponent(unbanButton))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Main", jPanel3);

        jPanel2.setMaximumSize(new java.awt.Dimension(800, 630));
        jPanel2.setMinimumSize(new java.awt.Dimension(800, 630));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 630));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        Censors.setText("Censorship control");
        Censors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CensorsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(Censors, gridBagConstraints);

        adminPanel.setText("Admin panel");
        adminPanel.setToolTipText("Chat panel admins");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(adminPanel, gridBagConstraints);

        controlItems.setText("Items control");
        controlItems.setToolTipText("Control items ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(controlItems, gridBagConstraints);

        dispAddAdmin.setText("Display add admin");
        dispAddAdmin.setToolTipText("Display adding admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(dispAddAdmin, gridBagConstraints);

        jLabel1.setText("Time Zone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(jLabel1, gridBagConstraints);

        strefaCzasowa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GMT-11:00", "GMT-10:00", "GMT-9:00", "GMT-8:00", "GMT-7:00", "GMT-6:00", "GMT-5:00", "GMT-4:00", "GMT-3:00", "GMT-2:00", "GMT-1:00", "GMT0:00", "GMT+1:00", "GMT+2:00", "GMT+3:00", "GMT+4:00", "GMT+5:00", "GMT+6:00", "GMT+7:00", "GMT+8:00", "GMT+9:00", "GMT+10:00", "GMT+11:00", "GMT+12:00" }));
        strefaCzasowa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strefaCzasowaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(strefaCzasowa, gridBagConstraints);
        strefaCzasowa.getAccessibleContext().setAccessibleName("Strefa Czasowa");

        jLabel2.setText("Default ban mask ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(jLabel2, gridBagConstraints);

        WelcomeCheck.setText("Welcome players");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(WelcomeCheck, gridBagConstraints);

        MaxBanMask.setText("Max ban mask");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(MaxBanMask, gridBagConstraints);

        defMask.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "/1", "/2", "/3", "/4", "/5", "/6", "/7", "/8", "/9", "/10", "/11", "/12", "/13", "/14", "/15", "/16", "/17", "/18", "/19", "/20", "/21", "/22", "/23", "/24", "/25", "/26", "/27", "/28", "/29", "/30" }));
        defMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defMaskActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(defMask, gridBagConstraints);
        defMask.getAccessibleContext().setAccessibleName("");

        maxMask.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "/1", "/2", "/3", "/4", "/5", "/6", "/7", "/8", "/9", "/10", "/11", "/12", "/13", "/14", "/15", "/16", "/17", "/18", "/19", "/20", "/21", "/22", "/23", "/24", "/25", "/26", "/27", "/28", "/29", "/30" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(maxMask, gridBagConstraints);

        jLabel5.setText("Name of exec (default igi2.exe)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel7.setText("Warnings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(jLabel7, gridBagConstraints);

        nameexe.setText("igi2.exe");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(nameexe, gridBagConstraints);

        warnings.setValue(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel2.add(warnings, gridBagConstraints);

        saveSettings.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saveSettings.setText("Save");
        saveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(saveSettings, gridBagConstraints);

        welcomePlayers.setText("Welcome");
        welcomePlayers.setPreferredSize(new java.awt.Dimension(120, 20));
        welcomePlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomePlayersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(welcomePlayers, gridBagConstraints);

        welcomeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "$none", "$nick", "$id", "$ip", " " }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(welcomeCombo, gridBagConstraints);

        welcome2.setText("on server!");
        welcome2.setMaximumSize(new java.awt.Dimension(100, 20));
        welcome2.setMinimumSize(new java.awt.Dimension(100, 20));
        welcome2.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(welcome2, gridBagConstraints);

        resetVisit.setText("Reset visit");
        resetVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetVisitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(resetVisit, gridBagConstraints);

        resetCrash.setText("Reset Crash");
        resetCrash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCrashActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(resetCrash, gridBagConstraints);

        changes.setText("Changes");
        changes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(changes, gridBagConstraints);

        sktk.setText("SK/TK control");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(sktk, gridBagConstraints);

        nicks.setText("Nicks control");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(nicks, gridBagConstraints);

        jLabel6.setText("Junior Rcon:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(juniorRcon, gridBagConstraints);

        jTabbedPane2.addTab("Settings", jPanel2);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        killLog.setText("Kill Log");
        killLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killLogActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(killLog, gridBagConstraints);

        longLog.setText("Open long log");
        longLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longLogActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(longLog, gridBagConstraints);

        longChat.setText("Open long chat");
        longChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longChatActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(longChat, gridBagConstraints);

        denidedNicksList.setText("List of denided nicks");
        denidedNicksList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denidedNicksListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(denidedNicksList, gridBagConstraints);

        optimization.setText("Optimize bases");
        optimization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optimizationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(optimization, gridBagConstraints);

        whois.setText("Player finder");
        whois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whoisActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(whois, gridBagConstraints);

        jButton1.setText("Announce Sender");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setText("Fake Players");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jButton2, gridBagConstraints);

        jTabbedPane2.addTab("Tools", jPanel1);

        jLabel4.setText("By Mario PL 2016");

        jLabel8.setText("version 1.0.0");

        softTime.setText("Soft uptime:");

        mRunTime.setText("0h 0min");

        remainItem.setText("Remaining items:");

        remainingItems.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(softTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mRunTime, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(remainItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remainingItems, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4)
                    .addComponent(softTime)
                    .addComponent(mRunTime)
                    .addComponent(remainItem)
                    .addComponent(remainingItems))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("Program to control dedicated server IGI2.");
    }// </editor-fold>//GEN-END:initComponents

    private void clearChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChatActionPerformed
        chat.setText(null);
    }//GEN-LAST:event_clearChatActionPerformed

    private void clearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogActionPerformed
        logServer.setText(null);
    }//GEN-LAST:event_clearLogActionPerformed

    private void startSrvToggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSrvToggActionPerformed
        Main server = new Main();
        if (startSrvTogg.isSelected()) {
            server.start();
        } else {
            server.stopServer();
        }

    }//GEN-LAST:event_startSrvToggActionPerformed

    private void strefaCzasowaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strefaCzasowaActionPerformed
        Main.conf.gettTime().setTimeZone(TimeZone.getTimeZone(strefaCzasowa.getSelectedItem().toString()));
    }//GEN-LAST:event_strefaCzasowaActionPerformed

    private void map_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_map_buttonActionPerformed
        Main.srv.changeMap(map_button.getSelectedIndex());
    }//GEN-LAST:event_map_buttonActionPerformed

    private void kickAllButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kickAllButtActionPerformed
        dodajLog("Kicking all (REMOTELY)", pink);
        Cmd.kickall();
    }//GEN-LAST:event_kickAllButtActionPerformed

    private void time_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_buttonActionPerformed
        dodajLog("Restarting map", pink);
        Cmd.restart();
    }//GEN-LAST:event_time_buttonActionPerformed

    private void announceButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_announceButtActionPerformed
        Main.srv.sendAnnounce(announceField.getText());
        annNum = Main.anns.size();
    }//GEN-LAST:event_announceButtActionPerformed

    private void commandButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandButtActionPerformed
        String cmd = commandField.getText();
        gui.dodajLog(cmd, gui.gray);
        if (!Main.cmds.get(Main.cmds.size() - 1).equals(cmd)) {
            Main.cmds.add(cmd);
            if (Main.cmds.size() > 20) {
                Main.cmds.remove(0);
            }
        }
        gui.getCommandField().setText(null);

        if (cmd.indexOf("/") == 0) {
            Cmd cmds = new Cmd(": " + cmd);
            cmds.start();
        } else {
            Main.srv.sendCommand(cmd);
        }
        cmdNum = Main.cmds.size();
    }//GEN-LAST:event_commandButtActionPerformed

    private void commandFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            commandButtActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            if (cmdNum > 0) {
                commandField.setText(Main.cmds.get(--cmdNum));
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (cmdNum < Main.cmds.size() - 1) {
                commandField.setText(Main.cmds.get(++cmdNum));
            }
        }

    }//GEN-LAST:event_commandFieldKeyPressed

    private void announceFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_announceFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            announceButtActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            if (annNum > 0) {
                announceField.setText(Main.anns.get(--annNum));
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (annNum < Main.anns.size() - 1) {
                announceField.setText(Main.anns.get(++annNum));
            }
        }
    }//GEN-LAST:event_announceFieldKeyPressed

    private void maxplayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxplayersActionPerformed
        Main.srv.changeMaxplayers(maxplayers.getSelectedIndex());
    }//GEN-LAST:event_maxplayersActionPerformed

    private void announceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_announceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_announceFieldActionPerformed

    private void saveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsActionPerformed
        Main.conf.setDefMask(defMask.getSelectedIndex());
        Main.conf.setMaxMask(maxMask.getSelectedIndex());
        Main.conf.setWarnings((int) warnings.getValue());
        Main.conf.setExe(nameexe.getText());
        Main.conf.setWelcome1(welcomePlayers.getText());
        Main.conf.setWelcome2(welcome2.getText());
        Main.conf.setWelcomeCombo(welcomeCombo.getSelectedIndex());
        Main.conf.setWelcomeCheck(WelcomeCheck.isSelected());
        Main.conf.setCensors(Censors.isSelected());
        Main.conf.setAdminPanel(adminPanel.isSelected());
        Main.conf.setDispAddAdmin(dispAddAdmin.isSelected());
        Main.conf.setItems(controlItems.isSelected());
        Main.conf.setSktk(sktk.isSelected());
        Main.conf.setJuniorRcon(juniorRcon.getText());
        Main.conf.setClassFile(Main.conf);

    }//GEN-LAST:event_saveSettingsActionPerformed
    void saveSettings() {
        Main.conf.setDefMask(defMask.getSelectedIndex());
        Main.conf.setMaxMask(maxMask.getSelectedIndex());
        Main.conf.setWarnings((int) warnings.getValue());
        Main.conf.setExe(nameexe.getText());
        Main.conf.setWelcome1(welcomePlayers.getText());
        Main.conf.setWelcome2(welcome2.getText());
        Main.conf.setWelcomeCombo(welcomeCombo.getSelectedIndex());
        Main.conf.setWelcomeCheck(WelcomeCheck.isSelected());
        Main.conf.setCensors(Censors.isSelected());
        Main.conf.setAdminPanel(adminPanel.isSelected());
        Main.conf.setDispAddAdmin(dispAddAdmin.isSelected());
        Main.conf.setItems(controlItems.isSelected());
        Main.conf.setSktk(sktk.isSelected());
        Main.conf.setJuniorRcon(juniorRcon.getText());
        Main.conf.setClassFile(Main.conf);

    }
    private void welcomePlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomePlayersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_welcomePlayersActionPerformed

    private void resetVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetVisitActionPerformed
        Main.conf.setVisitors(0);
        visitVal.setText("0");
    }//GEN-LAST:event_resetVisitActionPerformed

    private void resetCrashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCrashActionPerformed
        Main.conf.setCrashes(0);
        crashVal.setText("0");
    }//GEN-LAST:event_resetCrashActionPerformed

    private void defMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defMaskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_defMaskActionPerformed

    private void CensorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CensorsActionPerformed

    }//GEN-LAST:event_CensorsActionPerformed

    private void changesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changesActionPerformed
        AreaText changes = new AreaText();
        changes.getChanges().setText(Main.changes);
        changes.getChanges().setEditable(false);
        changes.setTitle("Changes");
        changes.setVisible(true);
    }//GEN-LAST:event_changesActionPerformed

    private void denidedNicksListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denidedNicksListActionPerformed
        try {
            File nicks = new File(Main.path + "nicks.txt");
            if (!nicks.exists()) {
                nicks.createNewFile();
            }
            AreaText changes = new AreaText(nicks);
            changes.getChanges().setText("");
            Scanner scan = new Scanner(nicks);
            String nicksList = "";
            while (scan.hasNextLine()) {
                nicksList += scan.nextLine() + "\n";
            }
            scan.close();
            changes.getChanges().setText(nicksList);
            changes.getjButton1().setEnabled(true);
            changes.setTitle("List of denided nicks");
            changes.setVisible(true);
        } catch (FileNotFoundException ex) {
            Loggs.loguj("Gui-denidedNicksPerformed", ex);
        } catch (IOException ex) {
            Loggs.loguj("Gui-denidedNicksPerformed", ex);
        }

    }//GEN-LAST:event_denidedNicksListActionPerformed

    private void jScrollPane2MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane2MouseWheelMoved
        if ((jScrollPane2.getVerticalScrollBar().getMaximum()
                - jScrollPane2.getVerticalScrollBar().getVisibleAmount())
                > jScrollPane2.getVerticalScrollBar().getValue()) {
            chatauto = false;
        } else {
            chatauto = true;
        }
    }//GEN-LAST:event_jScrollPane2MouseWheelMoved

    private void jScrollPane6MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane6MouseWheelMoved
        if ((jScrollPane6.getVerticalScrollBar().getMaximum()
                - jScrollPane6.getVerticalScrollBar().getVisibleAmount())
                > jScrollPane6.getVerticalScrollBar().getValue()) {
            logauto = false;
        } else {
            logauto = true;
        }
    }//GEN-LAST:event_jScrollPane6MouseWheelMoved

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to disable server?", "Close Server", YES_NO_OPTION);
        if (x == 0) {
            Main.conf.setDefMask(defMask.getSelectedIndex());
            Main.conf.setMaxMask(maxMask.getSelectedIndex());
            Main.conf.setWarnings((int) warnings.getValue());
            Main.conf.setExe(nameexe.getText());
            Main.conf.setWelcome1(welcomePlayers.getText());
            Main.conf.setWelcome2(welcome2.getText());
            Main.conf.setWelcomeCombo(welcomeCombo.getSelectedIndex());
            Main.conf.setWelcomeCheck(WelcomeCheck.isSelected());
            Main.conf.setCensors(Censors.isSelected());
            Main.conf.setAdminPanel(adminPanel.isSelected());
            Main.conf.setDispAddAdmin(dispAddAdmin.isSelected());
            Main.conf.setItems(controlItems.isSelected());
            Main.conf.setSktk(sktk.isSelected());
            Main.conf.setJuniorRcon(juniorRcon.getText());
            Main.conf.setClassFile(Main.conf);
            if (Main.srv != null) {
                Main.srv.closeServer();
            }
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void killLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killLogActionPerformed
        Main.kill.setVisible(true);
    }//GEN-LAST:event_killLogActionPerformed

    private void optimizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optimizationActionPerformed
        Optimization opIP = new Optimization("baseIP.txt");
        opIP.start();
        Optimization opCD = new Optimization("baseCDK.txt");
        opCD.start();
    }//GEN-LAST:event_optimizationActionPerformed

    private void longLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longLogActionPerformed

    private void longChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longChatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longChatActionPerformed

    private void whoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whoisActionPerformed
        Finder f = new Finder();
    }//GEN-LAST:event_whoisActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AnnounceSender a = new AnnounceSender();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void commandFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commandFieldActionPerformed

    private void banButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_banButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    String ip = banField.getText();
                    String cmd = "";
                    if (conf.getSystem().equals("lin")) {
                        cmd = "/sbin/iptables -I INPUT -s " + ip + " -j DROP";
                    } else if (conf.getSystem().equals("win")) {
                        cmd = "netsh advfirewall firewall add rule name=\"IGIBan\" dir=in protocol=udp interface=any action=block remoteip=" + ip;
                    }
                    Runtime.getRuntime().exec(cmd);
                    gui.dodajLog("IP: " + ip + " was banned (REMOTELY)", pink);
                    PrintWriter bany = new PrintWriter(new FileWriter("banlist.txt", true));
                    bany.println(cmd);
                    bany.close();
                } catch (IOException ex) {
                    Loggs.loguj(Gui.class.getName() + "-BanButton", ex);
                }
                banField.setText(null);
            }
        });
    }//GEN-LAST:event_banButtonActionPerformed

    private void banFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_banFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            banButtonActionPerformed(null);
        }
    }//GEN-LAST:event_banFieldKeyPressed

    private void banButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_banButtonKeyPressed
        if (evt.getKeyCode() == 10) {
            banButtonActionPerformed(null);
        }
    }//GEN-LAST:event_banButtonKeyPressed

    private void unbanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unbanButtonActionPerformed

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    String cmd = "";
                    if (conf.getSystem().equals("lin")) {
                        cmd = "/sbin/iptables -D INPUT -s " + banField.getText() + " -j DROP";
                    } else if (conf.getSystem().equals("win")) {
                        cmd = "netsh advfirewall firewall delete rule name=all remoteip=" + banField.getText();
                    }
                    Runtime.getRuntime().exec(cmd);
                    gui.dodajLog("Unbanned IP: " + banField.getText() + " (REMOTELY} ", gui.blue);

                    Scanner in = new Scanner(Paths.get("banlist.txt"));
                    PrintWriter bany = new PrintWriter(new FileWriter("tmp.txt", true));
                    String ln;
                    while (in.hasNextLine()) {
                        ln = in.nextLine();
                        if (ln.indexOf(banField.getText()) < 0) {
                            bany.append(ln);
                        }
                    }
                    in.close();
                    bany.close();
                    File file = new File("banlist.txt");
                    file.delete();
                    File file2 = new File("tmp.txt");
                    file2.renameTo(file);
                } catch (IOException ex) {
                    Loggs.loguj("Cmd-unban", ex);
                }
                banField.setText(null);
            }
        });
    }//GEN-LAST:event_unbanButtonActionPerformed

    private void unbanButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unbanButtonKeyPressed
        if (evt.getKeyCode() == 10) {
            unbanButtonActionPerformed(null);
        }
    }//GEN-LAST:event_unbanButtonKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FakePlayersGui f = new FakePlayersGui();
    }//GEN-LAST:event_jButton2ActionPerformed

    void dodajChat(String msg, SimpleAttributeSet color) {
        try {
            dchat.insertString(dchat.getLength(), Main.conf.getTime() + msg + "\n", color);
            if (chatauto) {
                chat.setCaretPosition(dchat.getLength());
            }
            PrintWriter chat = null;
            File fchat = new File(Main.path + "chat.txt");
            if (!fchat.exists()) {
                fchat.createNewFile();
            }
            chat = new PrintWriter(new FileWriter(fchat, true));
            chat.append(msg + "\n");
            chat.close();
        } catch (Exception ex) {
            Loggs.loguj("Gui-dodajChat", ex);
        }
    }

    void dodajLog(String msg, SimpleAttributeSet color) {
        try {
            dlog.insertString(dlog.getLength(), Main.conf.getTime() + msg + "\n", color);
            if (logauto) {
                logServer.setCaretPosition(dlog.getLength());
            }
            PrintWriter chat = null;
            File fchat = new File(Main.path + "serverLog.txt");
            if (!fchat.exists()) {
                fchat.createNewFile();
            }
            chat = new PrintWriter(new FileWriter(fchat, true));
            chat.append(msg + "\n");
            chat.close();
        } catch (Exception ex) {
            Loggs.loguj("Gui-dodajLog", ex);
        }
    }

    public void setFont() {
        dchat = chat.getStyledDocument();
        dlog = logServer.getStyledDocument();
        red = new SimpleAttributeSet();
        boom = new SimpleAttributeSet();
        blue = new SimpleAttributeSet();
        green = new SimpleAttributeSet();
        gray = new SimpleAttributeSet();
        lgray = new SimpleAttributeSet();
        black = new SimpleAttributeSet();
        cyan = new SimpleAttributeSet();
        dgray = new SimpleAttributeSet();
        mag = new SimpleAttributeSet();
        org = new SimpleAttributeSet();
        pink = new SimpleAttributeSet();
        yell = new SimpleAttributeSet();
        white = new SimpleAttributeSet();

        StyleConstants.setForeground(red, Color.RED);
        StyleConstants.setForeground(boom, Color.RED);
        StyleConstants.setForeground(blue, Color.BLUE);
        StyleConstants.setForeground(green, Color.GREEN);
        StyleConstants.setForeground(gray, Color.GRAY);
        StyleConstants.setForeground(lgray, Color.LIGHT_GRAY);
        StyleConstants.setForeground(black, Color.BLACK);
        StyleConstants.setForeground(cyan, Color.CYAN);
        StyleConstants.setForeground(dgray, Color.DARK_GRAY);
        StyleConstants.setForeground(mag, Color.MAGENTA);
        StyleConstants.setForeground(org, Color.ORANGE);
        StyleConstants.setForeground(pink, Color.PINK);
        StyleConstants.setForeground(yell, Color.YELLOW);
        StyleConstants.setForeground(white, Color.WHITE);
        StyleConstants.setBold(boom, true);

    }

    void setSettings() {
        nameexe.setText(Main.conf.getExe());
        warnings.setValue(Main.conf.getWarnings());
        defMask.setSelectedIndex(Main.conf.getDefMask());
        maxMask.setSelectedIndex(Main.conf.getMaxMask());
        welcomePlayers.setText(Main.conf.getWelcome1());
        welcome2.setText(Main.conf.getWelcome2());
        welcomeCombo.setSelectedIndex(Main.conf.getWelcomeCombo());
        WelcomeCheck.setSelected(Main.conf.isWelcomeCheck());
        Censors.setSelected(Main.conf.isCensors());
        adminPanel.setSelected(Main.conf.isAdminPanel());
        dispAddAdmin.setSelected(Main.conf.isDispAddAdmin());
        sktk.setSelected(Main.conf.isSktk());
        juniorRcon.setText(Main.conf.getJuniorRcon());
        controlItems.setSelected(Main.conf.isItems());
        igiTab.setComponentPopupMenu(popupMenu);
        igiTab.addMouseListener(new TableMouseListener(igiTab));
        consTab.setComponentPopupMenu(popupMenu);
        consTab.addMouseListener(new TableMouseListener(consTab));
    }

    void createPopupMenu() {
        igiTab.addMouseListener(new TableMouseListener(igiTab));
        consTab.addMouseListener(new TableMouseListener(consTab));
    }

    public Gui() {
        initComponents();
        setSettings();
        setFont();
        createPopupMenu();
        getjLabel8().setText("Version " + Main.version);
        announceField.setDocument(new JTextFieldLimit(39));
        cmdNum = 0;
        annNum = 0;
        String className = UIManager.getSystemLookAndFeelClassName();
        try {
            UIManager.setLookAndFeel("GTK+");
        } catch (Exception exc) {
            // ignore
        }
        /*try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         System.out.println(info.getName());
         if ("GTK+".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }*/
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });

    }

    private int cmdNum;
    private int annNum;
    private boolean chatauto = true;
    private boolean logauto = true;
    private StyledDocument dchat;
    private StyledDocument dlog;
    SimpleAttributeSet boom;
    SimpleAttributeSet red;
    SimpleAttributeSet blue;
    SimpleAttributeSet green;
    SimpleAttributeSet gray;
    SimpleAttributeSet lgray;
    SimpleAttributeSet black;
    SimpleAttributeSet cyan;
    SimpleAttributeSet dgray;
    SimpleAttributeSet mag;
    SimpleAttributeSet org;
    SimpleAttributeSet pink;
    SimpleAttributeSet yell;
    SimpleAttributeSet white;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Censors;
    private javax.swing.JLabel MaxBanMask;
    private javax.swing.JCheckBox WelcomeCheck;
    private javax.swing.JCheckBox adminPanel;
    private javax.swing.JButton announceButt;
    private javax.swing.JTextField announceField;
    private javax.swing.JButton banButton;
    private javax.swing.JTextField banField;
    private javax.swing.JButton changes;
    private javax.swing.JTextPane chat;
    private javax.swing.JButton clearChat;
    private javax.swing.JButton clearLog;
    private javax.swing.JButton commandButt;
    private javax.swing.JTextField commandField;
    private javax.swing.JTable consTab;
    private javax.swing.JCheckBox controlItems;
    private javax.swing.JLabel crash;
    private javax.swing.JLabel crashVal;
    private javax.swing.JProgressBar crashbar;
    private javax.swing.JLabel current_players;
    private javax.swing.JComboBox defMask;
    private javax.swing.JButton denidedNicksList;
    private javax.swing.JCheckBox dispAddAdmin;
    private javax.swing.JTable igiTab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField juniorRcon;
    private javax.swing.JButton kickAllButt;
    private javax.swing.JButton killLog;
    private javax.swing.JTextPane logServer;
    private javax.swing.JButton longChat;
    private javax.swing.JButton longLog;
    private javax.swing.JLabel mRunTime;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JComboBox map_button;
    private javax.swing.JComboBox maxMask;
    private javax.swing.JComboBox maxplayers;
    private javax.swing.JLabel name_;
    private javax.swing.JLabel name_server;
    private javax.swing.JTextField nameexe;
    private javax.swing.JCheckBox nicks;
    private javax.swing.JButton optimization;
    private javax.swing.JLabel passwdVal;
    private javax.swing.JLabel password;
    private javax.swing.JLabel players;
    private javax.swing.JLabel remainItem;
    private javax.swing.JLabel remainingItems;
    private javax.swing.JButton resetCrash;
    private javax.swing.JButton resetVisit;
    private javax.swing.JButton saveSettings;
    private javax.swing.JCheckBox sktk;
    private javax.swing.JLabel softTime;
    private javax.swing.JToggleButton startSrvTogg;
    private javax.swing.JComboBox strefaCzasowa;
    private javax.swing.JLabel time;
    private javax.swing.JButton time_button;
    private javax.swing.JButton unbanButton;
    private javax.swing.JLabel uptime;
    private javax.swing.JLabel uptimeVal;
    private javax.swing.JLabel visit;
    private javax.swing.JLabel visitVal;
    private javax.swing.JSpinner warnings;
    private javax.swing.JTextField welcome2;
    private javax.swing.JComboBox welcomeCombo;
    private javax.swing.JTextField welcomePlayers;
    private javax.swing.JButton whois;
    // End of variables declaration//GEN-END:variables
    private TableModel igitabmod;
    private TableModel constabmod;
    private JPopupMenu popupMenu;

    public int getAnnNum() {
        return annNum;
    }

    public void setAnnNum(int annNum) {
        this.annNum = annNum;
    }

    public int getCmdNum() {
        return cmdNum;
    }

    public void setCmdNum(int cmdNum) {
        this.cmdNum = cmdNum;
    }

    public JCheckBox getWelcomeCheck() {
        return WelcomeCheck;
    }

    public void setWelcomeCheck(JCheckBox WelcomeCheck) {
        this.WelcomeCheck = WelcomeCheck;
    }

    public JTextField getWelcome2() {
        return welcome2;
    }

    public void setWelcome2(JTextField welcome2) {
        this.welcome2 = welcome2;
    }

    public JComboBox getWelcomeCombo() {
        return welcomeCombo;
    }

    public void setWelcomeCombo(JComboBox welcomeCombo) {
        this.welcomeCombo = welcomeCombo;
    }

    public JButton getSaveSettings() {
        return saveSettings;
    }

    public void setSaveSettings(JButton saveSettings) {
        this.saveSettings = saveSettings;
    }

    public JTextField getWelcomePlayers() {
        return welcomePlayers;
    }

    public void setWelcomePlayers(JTextField welcomePlayers) {
        this.welcomePlayers = welcomePlayers;
    }

    public StyledDocument getDchat() {
        return dchat;
    }

    public void setDchat(StyledDocument dchat) {
        this.dchat = dchat;
    }

    public StyledDocument getDlog() {
        return dlog;
    }

    public void setDlog(StyledDocument dlog) {
        this.dlog = dlog;
    }

    public JCheckBox getCensors() {
        return Censors;
    }

    public void setCensors(JCheckBox Censors) {
        this.Censors = Censors;
    }

    public JLabel getMaxBanMask() {
        return MaxBanMask;
    }

    public void setMaxBanMask(JLabel MaxBanMask) {
        this.MaxBanMask = MaxBanMask;
    }

    public JCheckBox getAdminPanel() {
        return adminPanel;
    }

    public void setAdminPanel(JCheckBox adminPanel) {
        this.adminPanel = adminPanel;
    }

    public JButton getAnnounceButt() {
        return announceButt;
    }

    public void setAnnounceButt(JButton announceButt) {
        this.announceButt = announceButt;
    }

    public JTextField getAnnounceField() {
        return announceField;
    }

    public void setAnnounceField(JTextField announceField) {
        this.announceField = announceField;
    }

    public JTextPane getChat() {
        return chat;
    }

    public void setChat(JTextPane chat) {
        this.chat = chat;
    }

    public JButton getClearChat() {
        return clearChat;
    }

    public void setClearChat(JButton clearChat) {
        this.clearChat = clearChat;
    }

    public JButton getClearLog() {
        return clearLog;
    }

    public void setClearLog(JButton clearLog) {
        this.clearLog = clearLog;
    }

    public JButton getCommandButt() {
        return commandButt;
    }

    public void setCommandButt(JButton commandButt) {
        this.commandButt = commandButt;
    }

    public JTextField getCommandField() {
        return commandField;
    }

    public void setCommandField(JTextField commandField) {
        this.commandField = commandField;
    }

    public JTable getConsTab() {
        return consTab;
    }

    public void setConsTab(JTable consTab) {
        this.consTab = consTab;
    }

    public JCheckBox getControlItems() {
        return controlItems;
    }

    public void setControlItems(JCheckBox controlItems) {
        this.controlItems = controlItems;
    }

    public JLabel getCrash() {
        return crash;
    }

    public void setCrash(JLabel crash) {
        this.crash = crash;
    }

    public JLabel getCrashVal() {
        return crashVal;
    }

    public void setCrashVal(JLabel crashVal) {
        this.crashVal = crashVal;
    }

    public JProgressBar getCrashbar() {
        return crashbar;
    }

    public void setCrashbar(int value) {
        this.crashbar.setValue(value);
    }

    public JLabel getCurrent_players() {
        return current_players;
    }

    public void setCurrent_players(JLabel current_players) {
        this.current_players = current_players;
    }

    public JComboBox getDefMask() {
        return defMask;
    }

    public void setDefMask(JComboBox defMask) {
        this.defMask = defMask;
    }

    public JCheckBox getDispAddAdmin() {
        return dispAddAdmin;
    }

    public void setDispAddAdmin(JCheckBox dispAddAdmin) {
        this.dispAddAdmin = dispAddAdmin;
    }

    public JTable getIgiTab() {
        return igiTab;
    }

    public void setIgiTab(JTable igiTab) {
        this.igiTab = igiTab;
    }

    public JCheckBox getjCheckBox26() {
        return WelcomeCheck;
    }

    public void setjCheckBox26(JCheckBox jCheckBox26) {
        this.WelcomeCheck = jCheckBox26;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JLabel getjLabel5() {
        return jLabel5;
    }

    public void setjLabel5(JLabel jLabel5) {
        this.jLabel5 = jLabel5;
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    public void setjPanel2(JPanel jPanel2) {
        this.jPanel2 = jPanel2;
    }

    public JPanel getjPanel3() {
        return jPanel3;
    }

    public void setjPanel3(JPanel jPanel3) {
        this.jPanel3 = jPanel3;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    public void setjScrollPane2(JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    public JScrollPane getjScrollPane4() {
        return jScrollPane4;
    }

    public void setjScrollPane4(JScrollPane jScrollPane4) {
        this.jScrollPane4 = jScrollPane4;
    }

    public JScrollPane getjScrollPane6() {
        return jScrollPane6;
    }

    public void setjScrollPane6(JScrollPane jScrollPane6) {
        this.jScrollPane6 = jScrollPane6;
    }

    public JTabbedPane getjTabbedPane2() {
        return jTabbedPane2;
    }

    public void setjTabbedPane2(JTabbedPane jTabbedPane2) {
        this.jTabbedPane2 = jTabbedPane2;
    }

    public JButton getKickAllButt() {
        return kickAllButt;
    }

    public void setKickAllButt(JButton kickAllButt) {
        this.kickAllButt = kickAllButt;
    }

    public JTextPane getLogServer() {
        return logServer;
    }

    public void setLogServer(JTextPane logServer) {
        this.logServer = logServer;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }

    public JComboBox getMap_button() {
        return map_button;
    }

    public void setMap_button(JComboBox map_button) {
        this.map_button = map_button;
    }

    public JComboBox getMaxMask() {
        return maxMask;
    }

    public void setMaxMask(JComboBox maxMask) {
        this.maxMask = maxMask;
    }

    public JComboBox getMaxplayers() {
        return maxplayers;
    }

    public void setMaxplayers(JComboBox maxplayers) {
        this.maxplayers = maxplayers;
    }

    public JLabel getName_() {
        return name_;
    }

    public void setName_(JLabel name) {
        this.name_ = name;
    }

    public JLabel getName_server() {
        return name_server;
    }

    public void setName_server(JLabel name_server) {
        this.name_server = name_server;
    }

    public JTextField getNameexe() {
        return nameexe;
    }

    public void setNameexe(JTextField nameexe) {
        this.nameexe = nameexe;
    }

    public JLabel getPasswdVal() {
        return passwdVal;
    }

    public void setPasswdVal(JLabel passwdVal) {
        this.passwdVal = passwdVal;
    }

    public JLabel getPassword() {
        return password;
    }

    public void setPassword(JLabel password) {
        this.password = password;
    }

    public JLabel getPlayers() {
        return players;
    }

    public void setPlayers(JLabel players) {
        this.players = players;
    }

    public JToggleButton getStartSrvTogg() {
        return startSrvTogg;
    }

    public void setStartSrvTogg(JToggleButton startSrvTogg) {
        this.startSrvTogg = startSrvTogg;
    }

    public JComboBox getStrefaCzasowa() {
        return strefaCzasowa;
    }

    public void setStrefaCzasowa(JComboBox strefaCzasowa) {
        this.strefaCzasowa = strefaCzasowa;
    }

    public JLabel getTime() {
        return time;
    }

    public void setTime(JLabel time) {
        this.time = time;
    }

    public JButton getTime_button() {
        return time_button;
    }

    public void setTime_button(JButton time_button) {
        this.time_button = time_button;
    }

    public JLabel getUptime() {
        return uptime;
    }

    public void setUptime(JLabel uptime) {
        this.uptime = uptime;
    }

    public JLabel getUptimeVal() {
        return uptimeVal;
    }

    public void setUptimeVal(JLabel uptimeVal) {
        this.uptimeVal = uptimeVal;
    }

    public JLabel getVisit() {
        return visit;
    }

    public void setVisit(JLabel visit) {
        this.visit = visit;
    }

    public JLabel getVisitVal() {
        return visitVal;
    }

    public void setVisitVal(JLabel visitVal) {
        this.visitVal = visitVal;
    }

    public TableModel getIgitabmod() {
        return igitabmod;
    }

    public void setIgitabmod(TableModel igitabmod) {
        this.igitabmod = igitabmod;
    }

    public TableModel getConstabmod() {
        return constabmod;
    }

    public void setConstabmod(TableModel constabmod) {
        this.constabmod = constabmod;
    }

    public JSpinner getWarnings() {
        return warnings;
    }

    public void setWarnings(JSpinner warnings) {
        this.warnings = warnings;
    }

    public JLabel getjLabel8() {
        return jLabel8;
    }

    public void setjLabel8(JLabel jLabel8) {
        this.jLabel8 = jLabel8;
    }

    public JCheckBox getSktk() {
        return sktk;
    }

    public void setSktk(JCheckBox sktk) {
        this.sktk = sktk;
    }

    public JLabel getmRunTime() {
        return mRunTime;
    }

    public void setmRunTime(JLabel mRunTime) {
        this.mRunTime = mRunTime;
    }

    public JLabel getRemainingItems() {
        return remainingItems;
    }

    public void setRemainingItems(JLabel remainingItems) {
        this.remainingItems = remainingItems;
    }

    public JTextField getJuniorRcon() {
        return juniorRcon;
    }

    public void setJuniorRcon(JTextField juniorRcon) {
        this.juniorRcon = juniorRcon;
    }

}
